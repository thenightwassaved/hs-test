/* this file was automatically generated by extract-cfg-docs.py */

#include "cfghelp.h"

static const struct key_help cfg_help_section_contents_All[] =
{
	{ "AfterburnerEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy required to have 'Afterburners' activated" },
	{ "AntiWarpEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy required to have 'Anti-Warp' activated (thousanths per tick)" },
	{ "AntiWarpStatus", "Arena", "Integer", "0-2", NULL, NULL,
		"Whether ships are allowed to receive 'Anti-Warp' 0=no 1=yes 2=yes/start-with" },
	{ "AttachBounty", "Arena", "Integer", NULL, NULL, NULL,
		"Bounty required by ships to attach as a turret" },
	{ "BombBounceCount", "Arena", "Integer", NULL, NULL, NULL,
		"Number of times a ship's bombs bounce before they explode on impact" },
	{ "BombFireDelay", "Arena", "Integer", NULL, NULL, NULL,
		"delay that ship waits after a bomb is fired until another weapon may be fired (in ticks)" },
	{ "BombFireEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy it takes a ship to fire a single bomb" },
	{ "BombFireEnergyUpgrade", "Arena", "Integer", NULL, NULL, NULL,
		"Extra amount of energy it takes a ship to fire an upgraded bomb. i.e. L2 = BombFireEnergy+BombFireEnergyUpgrade" },
	{ "BombSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"How fast bombs travel" },
	{ "BombThrust", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of back-thrust you receive when firing a bomb" },
	{ "BrickMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of Bricks allowed in ships" },
	{ "BulletFireDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Delay that ship waits after a bullet is fired until another weapon may be fired (in ticks)" },
	{ "BulletFireEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy it takes a ship to fire a single L1 bullet" },
	{ "BulletSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"How fast bullets travel" },
	{ "BurstMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of Bursts allowed in ships" },
	{ "BurstShrapnel", "Arena", "Integer", NULL, NULL, NULL,
		"Number of bullets released when a 'Burst' is activated" },
	{ "BurstSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"How fast the burst shrapnel is for this ship" },
	{ "CloakEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy required to have 'Cloak' activated (thousanths per tick)" },
	{ "CloakStatus", "Arena", "Integer", "0-2", NULL, NULL,
		"Whether ships are allowed to receive 'Cloak' 0=no 1=yes 2=yes/start-with" },
	{ "DamageFactor", "Arena", "Integer", NULL, NULL, NULL,
		"How likely a the ship is to take damamage (ie. lose a prize) (0=special-case-never, 1=extremely likely, 5000=almost never)" },
	{ "DecoyMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of Decoys allowed in ships" },
	{ "DisableFastShooting", "Arena", "Boolean", NULL, NULL, NULL,
		"If firing bullets, bombs, or thors is disabled after using afterburners (1=enabled) (Cont .36+)" },
	{ "DoubleBarrel", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether ships fire with double barrel bullets" },
	{ "EmpBomb", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether ships fire EMP bombs" },
	{ "Gravity", "Arena", "Integer", NULL, NULL, NULL,
		"How strong of an effect the wormhole has on this ship (0 = none)" },
	{ "GravityTopSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Ship are allowed to move faster than their maximum speed while effected by a wormhole.  This determines how much faster they can go (0 = no extra speed)" },
	{ "InitialBombs", "Arena", "Other", "0-3", NULL, NULL,
		"Initial level a ship's bombs fire" },
	{ "InitialBounty", "Arena", "Integer", NULL, NULL, NULL,
		"Number of 'Greens' given to ships when they start" },
	{ "InitialBrick", "Arena", "Integer", NULL, NULL, NULL,
		"Initial number of Bricks given to ships when they start" },
	{ "InitialBurst", "Arena", "Integer", NULL, NULL, NULL,
		"Initial number of Bursts given to ships when they start" },
	{ "InitialDecoy", "Arena", "Integer", NULL, NULL, NULL,
		"Initial number of Decoys given to ships when they start" },
	{ "InitialEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Initial amount of energy that the ship can have" },
	{ "InitialGuns", "Arena", "Integer", "0-3", NULL, NULL,
		"Initial level a ship's guns fire" },
	{ "InitialPortal", "Arena", "Integer", NULL, NULL, NULL,
		"Initial number of Portals given to ships when they start" },
	{ "InitialRecharge", "Arena", "Integer", NULL, NULL, NULL,
		"Initial recharge rate, or how quickly this ship recharges its energy" },
	{ "InitialRepel", "Arena", "Integer", NULL, NULL, NULL,
		"Initial number of Repels given to ships when they start" },
	{ "InitialRocket", "Arena", "Integer", NULL, NULL, NULL,
		"Initial number of Rockets given to ships when they start" },
	{ "InitialRotation", "Arena", "Integer", NULL, NULL, NULL,
		"Initial rotation rate of the ship (0 = can't rotate, 400 = full rotation in 1 second)" },
	{ "InitialSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Initial speed of ship (0 = can't move)" },
	{ "InitialThor", "Arena", "Integer", NULL, NULL, NULL,
		"Initial number of Thor's Hammers given to ships when they start" },
	{ "InitialThrust", "Arena", "Integer", NULL, NULL, NULL,
		"Initial thrust of ship (0 = none)" },
	{ "LandmineFireDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Delay that ship waits after a mine is fired until another weapon may be fired (in ticks)" },
	{ "LandmineFireEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy it takes a ship to place a single L1 mine" },
	{ "LandmineFireEnergyUpgrade", "Arena", "Integer", NULL, NULL, NULL,
		"Extra amount of energy it takes to place an upgraded landmine. i.e. L2 = LandmineFireEnergy+LandmineFireEnergyUpgrade" },
	{ "MaxBombs", "Arena", "Integer", "0-3", NULL, NULL,
		"Maximum level a ship's bombs can fire" },
	{ "MaxGuns", "Arena", "Integer", "0-3", NULL, NULL,
		"Maximum level a ship's guns can fire" },
	{ "MaximumEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum amount of energy that the ship can have" },
	{ "MaximumRecharge", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum recharge rate, or how quickly this ship recharges its energy" },
	{ "MaximumRotation", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum rotation rate of the ship (0 = can't rotate, 400 = full rotation in 1 second)" },
	{ "MaximumSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum speed of ship (0 = can't move)" },
	{ "MaximumThrust", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum thrust of ship (0 = none)" },
	{ "MaxMines", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of mines allowed in ships" },
	{ "MultiFireAngle", "Arena", "Integer", NULL, NULL, NULL,
		"Angle spread between multi-fire bullets and standard forward firing bullets (111 = 1 degree, 1000 = 1 ship-rotation-point)" },
	{ "MultiFireDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Delay that ship waits after a multifire bullet is fired until another weapon may be fired (in ticks)" },
	{ "MultiFireEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy it takes a ship to fire multifire L1 bullets" },
	{ "PortalMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of Portals allowed in ships" },
	{ "PrizeShareLimit", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum bounty that ships receive Team Prizes" },
	{ "Radius", "Arena", "Integer", "0-255", NULL, "14",
		"The ship's radius from center to outside, in pixels. (Cont .37+)" },
	{ "RepelMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of Repels allowed in ships" },
	{ "RocketMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of Rockets allowed in ships" },
	{ "RocketTime", "Arena", "Integer", NULL, NULL, NULL,
		"How long a Rocket lasts (in ticks)" },
	{ "SeeBombLevel", "Arena", "Integer", "0-4", NULL, NULL,
		"If ship can see bombs on radar (0=Disabled, 1=All, 2=L2 and up, 3=L3 and up, 4=L4 bombs only)" },
	{ "SeeMines", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether ships see mines on radar" },
	{ "ShieldsTime", "Arena", "Integer", NULL, NULL, NULL,
		"How long Shields lasts on the ship (in ticks) " },
	{ "ShrapnelMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum amount of shrapnel released from a ship's bomb" },
	{ "ShrapnelRate", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of additional shrapnel gained by a 'Shrapnel Upgrade' prize." },
	{ "SoccerBallFriction", "Arena", "Integer", NULL, NULL, NULL,
		"Amount the friction on the soccer ball (how quickly it slows down -- higher numbers mean faster slowdown)" },
	{ "SoccerBallProximity", "Arena", "Integer", NULL, NULL, NULL,
		"How close the player must be in order to pick up ball (in pixels)" },
	{ "SoccerBallSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Initial speed given to the ball when fired by the carrier" },
	{ "SoccerThrowTime", "Arena", "Integer", NULL, NULL, NULL,
		"Time player has to carry soccer ball (in ticks)" },
	{ "StealthEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy required to have 'Stealth' activated (thousanths per tick)" },
	{ "StealthStatus", "Arena", "Integer", "0-2", NULL, NULL,
		"Whether ships are allowed to receive 'Stealth' 0=no 1=yes 2=yes/start-with" },
	{ "SuperTime", "Arena", "Integer", NULL, NULL, NULL,
		"How long Super lasts on the ship (in ticks)" },
	{ "ThorMax", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of Thor's Hammers allowed in ships" },
	{ "TurretLimit", "Arena", "Integer", NULL, NULL, NULL,
		"Number of turrets allowed on a ship" },
	{ "TurretSpeedPenalty", "Arena", "Integer", NULL, NULL, NULL,
		"Amount the ship's speed is decreased with a turret riding" },
	{ "TurretThrustPenalty", "Arena", "Integer", NULL, NULL, NULL,
		"Amount the ship's thrust is decreased with a turret riding" },
	{ "UpgradeEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount added per 'Energy Upgrade' Prize" },
	{ "UpgradeRecharge", "Arena", "Integer", NULL, NULL, NULL,
		"Amount added per 'Recharge Rate' Prize" },
	{ "UpgradeRotation", "Arena", "Integer", NULL, NULL, NULL,
		"Amount added per 'Rotation' Prize" },
	{ "UpgradeSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Amount added per 'Speed' Prize" },
	{ "UpgradeThrust", "Arena", "Integer", NULL, NULL, NULL,
		"Amount added per 'Thruster' Prize" },
	{ "XRadarEnergy", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy required to have 'X-Radar' activated (thousanths per tick)" },
	{ "XRadarStatus", "Arena", "Integer", "0-2", NULL, NULL,
		"Whether ships are allowed to receive 'X-Radar' 0=no 1=yes 2=yes/start-with" },
};

static const struct key_help cfg_help_section_contents_Billing[] =
{
	{ "IP", "Global", "String", NULL, NULL, NULL,
		"The ip address of the user database server (no dns hostnames allowed)." },
	{ "LocalChatPrefix", "Global", "String", NULL, NULL, NULL,
		"Secret prefix to prepend to local chats" },
	{ "Password", "Global", "String", NULL, NULL, NULL,
		"The password to log in to the user database server with." },
	{ "Port", "Global", "Integer", NULL, NULL, "1850",
		"The port to connect to on the user database server." },
	{ "Proxy", "Global", "String", NULL, NULL, NULL,
		"This setting allows you to specify an external program that will handle the billing server connection. The program should be prepared to speak the asss billing protocol over its standard input and output. It will get two command line arguments, which are the ip and port of the billing server, as specified in the Billing:IP and Billing:Port settings. The program name should either be an absolute pathname or be located on your $PATH." },
	{ "RetryInterval", "Global", "Integer", NULL, NULL, "180",
		"How many seconds to wait between tries to connect to the user database server." },
	{ "ScoreID", "Global", "Integer", NULL, NULL, "0",
		"Score realm." },
	{ "ServerID", "Global", "Integer", NULL, NULL, "0",
		"ServerID identifying zone to user database server." },
	{ "ServerName", "Global", "String", NULL, NULL, NULL,
		"The server name to send to the user database server." },
	{ "ServerNetwork", "Global", "String", NULL, NULL, NULL,
		"The network name to send to the billing server. A network name should identify a group of servers (e.g., SSCX)." },
	{ "StaffChatPrefix", "Global", "String", NULL, NULL, NULL,
		"Secret prefix to prepend to staff chats" },
	{ "StaffChats", "Global", "String", NULL, NULL, NULL,
		"Comma separated staff zone local list." },
};

static const struct key_help cfg_help_section_contents_Bomb[] =
{
	{ "BBombDamagePercent", "Arena", "Integer", NULL, NULL, NULL,
		"Percentage of normal damage applied to a bouncing bomb (in 0.1%)" },
	{ "BombAliveTime", "Arena", "Integer", NULL, NULL, NULL,
		"Time bomb is alive (in ticks)" },
	{ "BombDamageLevel", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of damage a bomb causes at its center point (for all bomb levels)" },
	{ "BombExplodeDelay", "Arena", "Integer", NULL, NULL, NULL,
		"How long after the proximity sensor is triggered before bomb explodes" },
	{ "BombExplodePixels", "Arena", "Integer", NULL, NULL, NULL,
		"Blast radius in pixels for an L1 bomb (L2 bombs double this, L3 bombs triple this)" },
	{ "BombSafety", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether proximity bombs have a firing safety.  If enemy ship is within proximity radius, will it allow you to fire" },
	{ "EBombDamagePercent", "Arena", "Integer", NULL, NULL, NULL,
		"Percentage of normal damage applied to an EMP bomb (in 0.1%)" },
	{ "EBombShutdownTime", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum time recharge is stopped on players hit with an EMP bomb" },
	{ "JitterTime", "Arena", "Integer", NULL, NULL, NULL,
		"How long the screen jitters from a bomb hit (in ticks)" },
	{ "ProximityDistance", "Arena", "Integer", NULL, NULL, NULL,
		"Radius of proximity trigger in tiles (each bomb level adds 1 to this amount)" },
};

static const struct key_help cfg_help_section_contents_Brick[] =
{
	{ "BrickMode", "Arena", "Integer", NULL, NULL, "$BRICK_VIE",
		"How bricks behave when they are dropped ($BRICK_VIE=improved SubGame, $BRICK_AHEAD=drop in a line ahead of player, $BRICK_LATERAL=drop laterally across player, $BRICK_CAGE=drop 4 bricks simultaneously to create a cage)" },
	{ "BrickSpan", "Arena", "Integer", NULL, NULL, "10",
		"The maximum length of a dropped brick." },
	{ "BrickTime", "Arena", "Integer", NULL, NULL, NULL,
		"How long bricks last (in ticks)" },
	{ "CountBricksAsWalls", "Arena", "Boolean", NULL, NULL, "1",
		"Whether bricks snap to the edges of other bricks (as opposed to only snapping to walls)" },
};

static const struct key_help cfg_help_section_contents_Bullet[] =
{
	{ "BulletAliveTime", "Arena", "Integer", NULL, NULL, NULL,
		"How long bullets live before disappearing (in ticks)" },
	{ "BulletDamageLevel", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum amount of damage that a L1 bullet will cause" },
	{ "BulletDamageUpgrade", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of extra damage each bullet level will cause" },
	{ "ExactDamage", "Arena", "Boolean", NULL, NULL, "0",
		"Whether to use exact bullet damage (Cont .36+)" },
};

static const struct key_help cfg_help_section_contents_Burst[] =
{
	{ "BurstDamageLevel", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum amount of damage caused by a single burst bullet" },
};

static const struct key_help cfg_help_section_contents_Chat[] =
{
	{ "CommandLimit", "Global", "Integer", NULL, NULL, "5",
		"How many commands are allowed on a single line." },
	{ "FloodLimit", "Global", "Integer", NULL, NULL, "10",
		"How many messages needed to be sent in a short period of time (about a second) to qualify for chat flooding." },
	{ "FloodShutup", "Global", "Integer", NULL, NULL, "60",
		"How many seconds to disable chat for a player that is flooding chat messages." },
	{ "MessageReliable", "Global", "Boolean", NULL, NULL, "1",
		"Whether to send chat messages reliably." },
	{ "RestrictChat", "Arena", "Integer", NULL, NULL, "0",
		"This specifies an initial chat mask for the arena. Don't use this unless you know what you're doing." },
};

static const struct key_help cfg_help_section_contents_Config[] =
{
	{ "CheckModifiedFilesInterval", "Global", "Integer", NULL, NULL, "1500",
		"How often to check for modified config files on disk (in ticks)." },
	{ "FlushDirtyValuesInterval", "Global", "Integer", NULL, NULL, "500",
		"How often to write modified config settings back to disk (in ticks)." },
};

static const struct key_help cfg_help_section_contents_Cost[] =
{
	{ "PurchaseAnytime", "Arena", "Boolean", NULL, NULL, "0",
		"Whether players can buy items outside a safe zone." },
};

static const struct key_help cfg_help_section_contents_Directory[] =
{
	{ "Description", "Global", "String", NULL, NULL, NULL,
		"The server description to send to the directory server. See Directory:Name for more information about the section name. " },
	{ "Name", "Global", "String", NULL, NULL, NULL,
		"The server name to send to the directory server. Virtual servers will use section name 'Directory-<vs-name>' for this and other settings in this section, and will fall back to 'Directory' if that section doesn't exist. See Net:Listen help for how to identify virtual servers." },
	{ "Password", "Global", "String", NULL, NULL, "cane",
		"The password used to send information to the directory server. Don't change this." },
	{ "Port", "Global", "Integer", NULL, NULL, "4991",
		"The port to connect to for the directory server." },
};

static const struct key_help cfg_help_section_contents_Door[] =
{
	{ "DoorDelay", "Arena", "Integer", NULL, NULL, NULL,
		"How often doors attempt to switch their state" },
	{ "DoorMode", "Arena", "Integer", NULL, NULL, NULL,
		"Door mode (-2=all doors completely random, -1=weighted random (some doors open more often than others), 0-255=fixed doors (1 bit of byte for each door specifying whether it is open or not)" },
};

static const struct key_help cfg_help_section_contents_Flag[] =
{
	{ "CarryFlags", "Arena", "Integer", NULL, NULL, NULL,
		"Whether the flags can be picked up and carried (0=no, 1=yes, 2=yes-one at a time, 3=yes-two at a time, 4=three, etc..)" },
	{ "DropCenter", "Arena", "Boolean", NULL, NULL, "0",
		"Whether flags dropped normally go in the center of the map, as opposed to near the player." },
	{ "DropOwned", "Arena", "Boolean", NULL, NULL, "1",
		"Whether flags you drop are owned by your team." },
	{ "DropRadius", "Arena", "Integer", NULL, NULL, "2",
		"How far from a player do dropped flags appear (in tiles)." },
	{ "EnterGameFlaggingDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Time a new player must wait before they are allowed to see flags" },
	{ "FlagBlankDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time that a user can get no data from server before flags are hidden from view for 10 seconds" },
	{ "FlagCount", "Arena", "Other", "0-256", NULL, "0",
		"How many flags are present in this arena." },
	{ "FlagDropDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Time before flag is dropped by carrier (0=never)" },
	{ "FlagDropResetReward", "Arena", "Integer", NULL, NULL, NULL,
		"Minimum kill reward that a player must get in order to have his flag drop timer reset" },
	{ "FlaggerBombFireDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Delay given to flaggers for firing bombs (zero is ships normal firing rate) (do not set this number less than 20)" },
	{ "FlaggerBombUpgrade", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether the flaggers get a bomb upgrade" },
	{ "FlaggerDamagePercent", "Arena", "Integer", NULL, NULL, NULL,
		"Percentage of normal damage received by flaggers (in 0.1%)" },
	{ "FlaggerFireCostPercent", "Arena", "Integer", NULL, NULL, NULL,
		"Percentage of normal weapon firing cost for flaggers (in 0.1%)" },
	{ "FlaggerGunUpgrade", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether the flaggers get a gun upgrade" },
	{ "FlaggerKillMultiplier", "Arena", "Integer", NULL, NULL, NULL,
		"Number of times more points are given to a flagger (1 = double points, 2 = triple points)" },
	{ "FlaggerOnRadar", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether the flaggers appear on radar in red" },
	{ "FlaggerSpeedAdjustment", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of speed adjustment player carrying flag gets (negative numbers mean slower)" },
	{ "FlaggerThrustAdjustment", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of thrust adjustment player carrying flag gets (negative numbers mean less thrust)" },
	{ "FlagReward", "Arena", "Integer", NULL, "points_flag", "5000",
		"The basic flag reward is calculated as (players in arena)^2 * reward / 1000." },
	{ "FriendlyTransfer ", "Arena", "Boolean", NULL, NULL, "1",
		"Whether you get a teammates flags when you kill him." },
	{ "GameType", "Arena", "Enumerated", NULL, NULL, "$FLAGGAME_NONE",
		"The flag game type for this arena. $FLAGGAME_NONE means no flag game, $FLAGGAME_BASIC is a standard warzone or running zone game, and $FLAGGAME_TURF specifies immobile flags." },
	{ "NeutCenter", "Arena", "Boolean", NULL, NULL, "0",
		"Whether flags that are neut-droped go in the center, as opposed to near the player who dropped them." },
	{ "NeutOwned", "Arena", "Boolean", NULL, NULL, "0",
		"Whether flags you neut-drop are owned by your team." },
	{ "NoDataFlagDropDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time that a user can get no data from server before flags he is carrying are dropped" },
	{ "PersistentTurfOwners", "Arena", "Boolean", NULL, NULL, "1",
		"Whether ownership of turf flags persists even when the arena is empty (or the server crashes)." },
	{ "ResetDelay", "Arena", "Integer", NULL, NULL, "0",
		"The length of the delay between flag games." },
	{ "SafeCenter", "Arena", "Boolean", NULL, NULL, "0",
		"Whether flags dropped from a safe zone spawn in the center, as opposed to near the safe zone player." },
	{ "SafeOwned", "Arena", "Boolean", NULL, NULL, "1",
		"Whether flags dropped from a safe zone are owned by your team, as opposed to neutral." },
	{ "SpawnRadius", "Arena", "Integer", NULL, NULL, "50",
		"How far from the spawn center that new flags spawn (in tiles)." },
	{ "SpawnX", "Arena", "Integer", NULL, NULL, "512",
		"The X coordinate that new flags spawn at (in tiles)." },
	{ "SpawnY", "Arena", "Integer", NULL, NULL, "512",
		"The Y coordinate that new flags spawn at (in tiles)." },
	{ "SplitPoints", "Arena", "Boolean", NULL, NULL, "0",
		"Whether to split a flag reward between the members of a freq or give them each the full amount." },
	{ "TKCenter", "Arena", "Boolean", NULL, NULL, "0",
		"Whether flags dropped by a team-kill spawn in the center, as opposed to near the killed player." },
	{ "TKOwned", "Arena", "Boolean", NULL, NULL, "1",
		"Whether flags dropped by a team-kill are owned by your team, as opposed to neutral." },
	{ "WinDelay", "Arena", "Integer", NULL, NULL, "200",
		"The delay between dropping the last flag and winning (ticks)." },
};

static const struct key_help cfg_help_section_contents_General[] =
{
	{ "AllowUnknown", "File: passwd.conf", "Boolean", NULL, "auth_file", "1",
		"Determines whether to allow players not listed in the password file." },
	{ "AutoAdd", "File: passwd.conf", "Boolean", NULL, "auth_file", "0",
		"Determines whether to automatically add players with no password entries to the password file." },
	{ "DesiredPlaying", "Arena", "Integer", NULL, "ap_multipub", "15",
		"This controls when the server will create new public arenas." },
	{ "LevelFiles", "Arena", "String", NULL, NULL, NULL,
		"A list of extra files to send to the client for downloading. A '+' before any file means it's marked as optional." },
	{ "Map", "Arena", "String", NULL, NULL, NULL,
		"The name of the level file for this arena." },
	{ "MaxPlaying", "Arena", "Integer", NULL, NULL, "100",
		"This is the most players that will be allowed to play in the arena at once. Zero means no limit." },
	{ "NeedCap", "Arena", "String", NULL, "arenaperm", NULL,
		"If this setting is present for an arena, any player entering the arena must have the capability specified this setting. This can be used to restrict arenas to certain groups of players." },
	{ "NewsFile", "Global", "String", NULL, NULL, "news.txt",
		"The filename of the news file." },
	{ "NewsRefreshMinutes", "Global", "Integer", NULL, NULL, "5",
		"How often to check for an updated news.txt." },
	{ "PublicArenas", "Global", "String", NULL, "ap_multipub", NULL,
		"A list of public arena types that the server will place people in when they don't request a specific arena." },
	{ "ScoreGroup", "Arena", "String", NULL, NULL, NULL,
		"If this is set, it will be used as the score identifier for shared scores for this arena (unshared scores, e.g. per-game scores, always use the arena name as the identifier). Setting this to the same value in several different arenas will cause them to share scores." },
	{ "ShipChangeLimit", "Global", "Integer", NULL, NULL, "10",
		"The number of ship changes in a short time (about 10 seconds) before ship changing is disabled (for about 30 seconds)." },
};

static const struct key_help cfg_help_section_contents_Kill[] =
{
	{ "BountyIncreaseForKill", "Arena", "Integer", NULL, NULL, NULL,
		"Number of points added to players bounty each time he kills an opponent" },
	{ "EnterDelay", "Arena", "Integer", NULL, NULL, NULL,
		"How long after a player dies before he can re-enter the game (in ticks)" },
	{ "FlagValue", "Arena", "Integer", NULL, NULL, "100",
		"The number of extra points to give for each flag a killed player was carrying." },
	{ "JackpotBountyPercent", "Arena", "Integer", NULL, NULL, "0",
		"The percent of a player's bounty added to the jackpot on each kill. Units: 0.1%." },
	{ "MaxBonus", "Arena", "Integer", NULL, NULL, NULL,
		"FIXME: fill this in" },
	{ "MaxPenalty", "Arena", "Integer", NULL, NULL, NULL,
		"FIXME: fill this in" },
	{ "RewardBase", "Arena", "Integer", NULL, NULL, NULL,
		"FIXME: fill this in" },
};

static const struct key_help cfg_help_section_contents_Lag[] =
{
	{ "C2SLossToDisallowFlags", "Arena", "Integer", NULL, NULL, "50",
		"The C2S packetloss when a player isn't allowed to pick up flags or balls. Units 0.1%." },
	{ "C2SLossToSpec", "Arena", "Integer", NULL, NULL, "150",
		"The C2S packetloss at which to force a player to spec. Units 0.1%." },
	{ "CheckInterval", "Global", "Integer", NULL, NULL, "300",
		"How often to check each player for out-of-bounds lag values (in ticks)." },
	{ "PingToDisallowFlags", "Arena", "Integer", NULL, NULL, "500",
		"The average ping when a player isn't allowed to pick up flags or balls." },
	{ "PingToIgnoreAllWeapons", "Arena", "Integer", NULL, NULL, "1000",
		"The average ping when all weapons should be ignored." },
	{ "PingToSpec", "Arena", "Integer", NULL, NULL, "600",
		"The average ping at which to force a player to spec." },
	{ "PingToStartIgnoringWeapons", "Arena", "Integer", NULL, NULL, "300",
		"The average ping to start ignoring weapons at." },
	{ "S2CLossToDisallowFlags", "Arena", "Integer", NULL, NULL, "50",
		"The S2C packetloss when a player isn't allowed to pick up flags or balls. Units 0.1%." },
	{ "S2CLossToIgnoreAllWeapons", "Arena", "Integer", NULL, NULL, "500",
		"The S2C packetloss when all weapons should be ignored. Units 0.1%." },
	{ "S2CLossToSpec", "Arena", "Integer", NULL, NULL, "150",
		"The S2C packetloss at which to force a player to spec. Units 0.1%." },
	{ "S2CLossToStartIgnoringWeapons", "Arena", "Integer", NULL, NULL, "40",
		"The S2C packetloss to start ignoring weapons at. Units 0.1%." },
	{ "SpikeToSpec", "Arena", "Integer", NULL, NULL, "3000",
		"The amount of time the server can get no data from a player before forcing him to spectator mode (in ms)." },
	{ "WeaponLossToDisallowFlags", "Arena", "Integer", NULL, NULL, "50",
		"The weapon packetloss when a player isn't allowed to pick up flags or balls. Units 0.1%." },
	{ "WeaponLossToIgnoreAllWeapons", "Arena", "Integer", NULL, NULL, "500",
		"The weapon packetloss when all weapons should be ignored. Units 0.1%." },
	{ "WeaponLossToSpec", "Arena", "Integer", NULL, NULL, "150",
		"The weapon packetloss at which to force a player to spec. Units 0.1%." },
	{ "WeaponLossToStartIgnoringWeapons", "Arena", "Integer", NULL, NULL, "40",
		"The weapon packetloss to start ignoring weapons at. Units 0.1%." },
};

static const struct key_help cfg_help_section_contents_Latency[] =
{
	{ "ClientSlowPacketSampleSize", "Arena", "Integer", NULL, NULL, NULL,
		"Number of packets to sample S2C before checking for kickout" },
	{ "ClientSlowPacketTime", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of latency S2C that constitutes a slow packet" },
	{ "S2CNoDataKickoutDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time a user can receive no data from server before connection is terminated" },
	{ "SendRoutePercent", "Arena", "Integer", NULL, NULL, NULL,
		"Percentage of the ping time that is spent on the C2S portion of the ping (used in more accurately syncronizing clocks)" },
};

static const struct key_help cfg_help_section_contents_Listen[] =
{
	{ "AllowCont", "Global", "Boolean", NULL, NULL, "1",
		"Whether Continuum clients are allowed to connect to this port." },
	{ "AllowVIE", "Global", "Boolean", NULL, NULL, "1",
		"Whether VIE protocol clients (i.e., Subspace 1.34 and bots) are allowed to connect to this port." },
	{ "BindAddress", "Global", "String", NULL, NULL, NULL,
		"The interface address to bind to. This is optional, and if omitted, the server will listen on all available interfaces." },
	{ "ConnectAs", "Global", "String", NULL, NULL, NULL,
		"This setting allows you to treat clients differently depending on which port they connect to. It serves as a virtual server identifier for the rest of the server. The standard arena placement module will use this as the name of a default arena to put clients who connect through this port in." },
	{ "Port", "Global", "Integer", NULL, NULL, NULL,
		"The port that the game protocol listens on. Sections named Listen1 through Listen9 are also supported. All Listen sections must contain a port setting." },
};

static const struct key_help cfg_help_section_contents_Log[] =
{
	{ "FileFlushPeriod", "Global", "Integer", NULL, NULL, "10",
		"How often to flush the log file to disk (in minutes)." },
	{ "LogFile", "Global", "String", NULL, NULL, "asss.log",
		"The name of the log file." },
};

static const struct key_help cfg_help_section_contents_log_staff[] =
{
	{ "commands", "Arena", "String", NULL, "log_staff", "'warn kick setcm'",
		"A list of commands that trigger messages to all logged-in staff." },
};

static const struct key_help cfg_help_section_contents_Message[] =
{
	{ "AllowAudioMessages", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether players can send audio messages" },
};

static const struct key_help cfg_help_section_contents_Mine[] =
{
	{ "MineAliveTime", "Arena", "Integer", NULL, NULL, NULL,
		"Time that mines are active (in ticks)" },
	{ "TeamMaxMines", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum number of mines allowed to be placed by an entire team" },
};

static const struct key_help cfg_help_section_contents_Misc[] =
{
	{ "ActivateAppShutdownTime", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time a ship is shutdown after application is reactivated" },
	{ "AllowSavedShips", "Arena", "Integer", NULL, NULL, NULL,
		"Whether saved ships are allowed (do not allow saved ship in zones where sub-arenas may have differing parameters)" },
	{ "AntiWarpSettleDelay", "Arena", "Integer", NULL, NULL, NULL,
		"How many ticks to activate a fake antiwarp after attaching, portaling, or warping." },
	{ "BounceFactor", "Arena", "Integer", NULL, NULL, NULL,
		"How bouncy the walls are (16 = no speed loss)" },
	{ "DecoyAliveTime", "Arena", "Integer", NULL, NULL, NULL,
		"Time a decoy is alive (in ticks)" },
	{ "DisableBallKilling", "Arena", "Boolean", NULL, NULL, "0",
		"Whether to disable ball killing in safe zones (Cont .38+)" },
	{ "DisableBallThroughWalls", "Arena", "Boolean", NULL, NULL, "0",
		"Whether to disable ball-passing through walls (Cont .38+)" },
	{ "DisableScreenshot", "Arena", "Boolean", NULL, NULL, "0",
		"Whether to disable Continuum's screenshot feature (Cont .37+)" },
	{ "ExtraPositionData", "Arena", "Integer", NULL, NULL, NULL,
		"Whether regular players receive sysop data about a ship" },
	{ "FrequencyShift", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of random frequency shift applied to sounds in the game" },
	{ "GreetMessage", "Arena", "String", NULL, NULL, NULL,
		"The message to send to each player on entering the arena." },
	{ "MaxXres", "Arena", "Integer", NULL, NULL, "0",
		"Maximum screen width allowed in the arena. Zero means no limit." },
	{ "MaxYres", "Arena", "Integer", NULL, NULL, "0",
		"Maximum screen height allowed in the arena. Zero means no limit." },
	{ "NearDeathLevel", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of energy that constitutes a near-death experience (ships bounty will be decreased by 1 when this occurs -- used for dueling zone)" },
	{ "SafetyLimit", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time that can be spent in the safe zone (in ticks)" },
	{ "SeeEnergy", "Arena", "Enumerated", NULL, NULL, "$SEE_NONE",
		"Whose energy levels everyone can see: $SEE_NONE means nobody else's, $SEE_ALL is everyone's, $SEE_TEAM is only teammates." },
	{ "SelfScoreReset", "Arena", "Boolean", NULL, NULL, "0",
		"Whether players can reset their own scores using ?scorereset. */" },
	{ "SendPositionDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time between position packets sent by client" },
	{ "SheepMessage", "Arena", "String", NULL, NULL, NULL,
		"The message that appears when someone says ?sheep" },
	{ "SlowFrameCheck", "Arena", "Integer", NULL, NULL, NULL,
		"Whether to check for slow frames on the client (possible cheat technique) (flawed on some machines, do not use)" },
	{ "SpecSeeEnergy", "Arena", "Enumerated", NULL, NULL, "$SEE_NONE",
		"Whose energy levels spectators can see. The options are the same as for Misc:SeeEnergy, with one addition: $SEE_SPEC means only the player you're spectating." },
	{ "SpecSeeExtra", "Arena", "Boolean", NULL, NULL, "1",
		"Whether spectators can see extra data for the person they're spectating." },
	{ "TeamKillPoints", "Arena", "Boolean", NULL, NULL, "0",
		"Whether points are awarded for a team-kill." },
	{ "TickerDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time between ticker help messages" },
	{ "TimedGame", "Arena", "Integer", NULL, NULL, "0",
		"How long the game timer lasts (in ticks). Zero to disable." },
	{ "VictoryMusic", "Arena", "Integer", NULL, NULL, NULL,
		"Whether the zone plays victory music or not" },
	{ "WarpPointDelay", "Arena", "Integer", NULL, NULL, NULL,
		"How long a portal is active" },
	{ "WarpRadiusLimit", "Arena", "Integer", NULL, NULL, NULL,
		"When ships are randomly placed in the arena, this parameter will limit how far from the center of the arena they can be placed (1024=anywhere)" },
};

static const struct key_help cfg_help_section_contents_Modules[] =
{
	{ "AttachModules", "Arena", "String", NULL, NULL, NULL,
		"This is a list of modules that you want to take effect in this arena. Not all modules need to be attached to arenas to function, but some do." },
};

static const struct key_help cfg_help_section_contents_mysql[] =
{
	{ "database", "Global", "String", NULL, "mysql", NULL,
		"The database on the mysql server to use." },
	{ "hostname", "Global", "String", NULL, "mysql", NULL,
		"The name of the mysql server." },
	{ "password", "Global", "String", NULL, "mysql", NULL,
		"The password to log in to the mysql server as." },
	{ "user", "Global", "String", NULL, "mysql", NULL,
		"The mysql user to log in to the server as." },
};

static const struct key_help cfg_help_section_contents_Net[] =
{
	{ "AntiwarpSendPercent", "Global", "Integer", NULL, NULL, "5",
		"Percent of position packets with antiwarp enabled to send to the whole arena." },
	{ "BulletPixels", "Global", "Integer", NULL, NULL, "1500",
		"How far away to always send bullets (in pixels)." },
	{ "ChatListen", "Global", "String", NULL, "chatnet", NULL,
		"Where to listen for chat protocol connections. Either 'port' or 'ip:port'. Net:Listen will be used if this is missing." },
	{ "ChatMessageDelay", "Global", "Integer", NULL, NULL, "20 mod: chatnet",
		"The delay between sending messages to clients using the text-based chat protocol. (To limit bandwidth used by non-playing cilents.)" },
	{ "DropTimeout", "Global", "Integer", NULL, NULL, "3000",
		"How long to get no data from a client before disconnecting him (in ticks)." },
	{ "Listen", "Global", "String", NULL, NULL, NULL,
		"A designation for a port and ip to listen on. Format is one of 'port', 'port:connectas', or 'ip:port:connectas'. Listen1 through Listen9 are also supported. A missing or zero-length 'ip' field means all interfaces. The 'connectas' field can be used to treat clients differently depending on which port or ip they use to connect to the server. It serves as a virtual server identifier for the rest of the server." },
	{ "MaxOutlistSize", "Global", "Integer", NULL, NULL, "200",
		"How many S2C packets the server will buffer for a client before dropping him." },
	{ "PositionExtraPixels", "Global", "Integer", NULL, NULL, "8000",
		"How far away to send positions of players on radar." },
	{ "WeaponPixels", "Global", "Integer", NULL, NULL, "2000",
		"How far away to always send weapons (in pixels)." },
};

static const struct key_help cfg_help_section_contents_Periodic[] =
{
	{ "RewardDelay", "Arena", "Integer", NULL, NULL, "0",
		"The interval between periodic rewards (in ticks). Zero to disable." },
	{ "RewardMinimumPlayers", "Arena", "Integer", NULL, NULL, "0",
		"The minimum players necessary in the arena to give out periodic rewards." },
	{ "RewardPoints", "Arena", "Integer", NULL, "points_periodic", "100",
		"Periodic rewards are calculated as follows: If this setting is positive, you get this many points per flag. If it's negative, you get it's absolute value points per flag, times the number of players in the arena." },
};

static const struct key_help cfg_help_section_contents_Persist[] =
{
	{ "SyncSeconds", "Global", "Integer", NULL, NULL, "180",
		"The interval at which all persistent data is synced to the database." },
};

static const struct key_help cfg_help_section_contents_Prize[] =
{
	{ "DeathPrizeTime", "Arena", "Integer", NULL, NULL, NULL,
		"How long the prize exists that appears after killing somebody" },
	{ "DontShareBrick", "Arena", "Boolean", NULL, NULL, "0",
		"Whether Brick greens don't go to the whole team." },
	{ "DontShareBurst", "Arena", "Boolean", NULL, NULL, "0",
		"Whether Burst greens don't go to the whole team." },
	{ "DontShareThor", "Arena", "Boolean", NULL, NULL, "0",
		"Whether Thor greens don't go to the whole team." },
	{ "EngineShutdownTime", "Arena", "Integer", NULL, NULL, NULL,
		"Time the player is affected by an 'Engine Shutdown' Prize (in ticks)" },
	{ "MinimumVirtual", "Arena", "Integer", NULL, NULL, NULL,
		"Distance from center of arena that prizes/flags/soccer-balls will spawn" },
	{ "MultiPrizeCount", "Arena", "Integer", NULL, NULL, NULL,
		"Number of random greens given with a MultiPrize" },
	{ "PrizeDelay", "Arena", "Integer", NULL, NULL, NULL,
		"How often prizes are regenerated (in ticks)" },
	{ "PrizeFactor", "Arena", "Integer", NULL, NULL, NULL,
		"Number of prizes hidden is based on number of players in game. This number adjusts the formula, higher numbers mean more prizes. (Note: 10000 is max, 10 greens per person)" },
	{ "PrizeHideCount", "Arena", "Integer", NULL, NULL, NULL,
		"Number of prizes that are regenerated every PrizeDelay" },
	{ "PrizeMaxExist", "Arena", "Integer", NULL, NULL, NULL,
		"Maximum amount of time that a hidden prize will remain on screen. (actual time is random)" },
	{ "PrizeMinExist", "Arena", "Integer", NULL, NULL, NULL,
		"Minimum amount of time that a hidden prize will remain on screen. (actual time is random)" },
	{ "PrizeNegativeFactor", "Arena", "Integer", NULL, NULL, NULL,
		"Odds of getting a negative prize.  (1 = every prize, 32000 = extremely rare)" },
	{ "TakePrizeReliable", "Arena", "Integer", NULL, NULL, NULL,
		"Whether prize packets are sent reliably (C2S)" },
	{ "UpgradeVirtual", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of additional distance added to MinimumVirtual for each player that is in the game" },
};

static const struct key_help cfg_help_section_contents_PrizeWeight[] =
{
	{ "AllWeapons", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Super!' prize appearing" },
	{ "AntiWarp", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'AntiWarp' prize appearing" },
	{ "Bomb", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Bomb Upgrade' prize appearing" },
	{ "BouncingBullets", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Bouncing Bullets' prize appearing" },
	{ "Brick", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Brick' prize appearing" },
	{ "Burst", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Burst' prize appearing" },
	{ "Cloak", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Cloak' prize appearing" },
	{ "Decoy", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Decoy' prize appearing" },
	{ "Energy", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Energy Upgrade' prize appearing" },
	{ "Glue", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Engine Shutdown' prize appearing" },
	{ "Gun", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Gun Upgrade' prize appearing" },
	{ "MultiFire", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'MultiFire' prize appearing" },
	{ "MultiPrize", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Multi-Prize' prize appearing" },
	{ "Portal", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Portal' prize appearing" },
	{ "Proximity", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Proximity Bomb' prize appearing" },
	{ "QuickCharge", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Recharge' prize appearing" },
	{ "Recharge", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Full Charge' prize appearing (not 'Recharge')" },
	{ "Repel", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Repel' prize appearing" },
	{ "Rocket", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Rocket' prize appearing" },
	{ "Rotation", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Rotation' prize appearing" },
	{ "Shields", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Shields' prize appearing" },
	{ "Shrapnel", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Shrapnel Upgrade' prize appearing" },
	{ "Stealth", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Stealth' prize appearing" },
	{ "Thor", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Thor' prize appearing" },
	{ "Thruster", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Thruster' prize appearing" },
	{ "TopSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Speed' prize appearing" },
	{ "Warp", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'Warp' prize appearing" },
	{ "XRadar", "Arena", "Integer", NULL, NULL, NULL,
		"Likelihood of 'XRadar' prize appearing" },
};

static const struct key_help cfg_help_section_contents_Radar[] =
{
	{ "MapZoomFactor", "Arena", "Integer", NULL, NULL, NULL,
		"A number representing how far you can see on radar" },
	{ "RadarMode", "Arena", "Integer", NULL, NULL, NULL,
		"Radar mode (0=normal, 1=half/half, 2=quarters, 3=half/half-see team mates, 4=quarters-see team mates)" },
	{ "RadarNeutralSize", "Arena", "Integer", NULL, NULL, NULL,
		"Size of area between blinded radar zones (in pixels)" },
};

static const struct key_help cfg_help_section_contents_Repel[] =
{
	{ "RepelDistance", "Arena", "Integer", NULL, NULL, NULL,
		"Number of pixels from the player that are affected by a repel" },
	{ "RepelSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Speed at which players are repelled" },
	{ "RepelTime", "Arena", "Integer", NULL, NULL, NULL,
		"Time players are affected by the repel (in ticks)" },
};

static const struct key_help cfg_help_section_contents_Rocket[] =
{
	{ "RocketSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Speed value given while a rocket is active" },
	{ "RocketThrust", "Arena", "Integer", NULL, NULL, NULL,
		"Thrust value given while a rocket is active" },
};

static const struct key_help cfg_help_section_contents_Security[] =
{
	{ "MaxDeathWithoutFiring", "Arena", "Integer", NULL, NULL, "5",
		"The number of times a player can die without firing a weapon before being placed in spectator mode." },
};

static const struct key_help cfg_help_section_contents_Shrapnel[] =
{
	{ "InactiveShrapDamage", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of damage shrapnel causes in it's first 1/4 second of life" },
	{ "Random", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether shrapnel spreads in circular or random patterns" },
	{ "ShrapnelDamagePercent", "Arena", "Integer", NULL, NULL, NULL,
		"Percentage of normal damage applied to shrapnel (relative to bullets of same level) (in 0.1%)" },
	{ "ShrapnelSpeed", "Arena", "Integer", NULL, NULL, NULL,
		"Speed that shrapnel travels" },
};

static const struct key_help cfg_help_section_contents_Soccer[] =
{
	{ "AllowBombs", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether the ball carrier can fire his bombs" },
	{ "AllowGoalByDeath", "Arena", "Boolean", NULL, NULL, "0",
		"Whether a goal is scored if a player dies carrying the ball on a goal tile." },
	{ "AllowGuns", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether the ball carrier can fire his guns" },
	{ "BallBlankDelay", "Arena", "Integer", NULL, NULL, NULL,
		"Amount of time a player can receive no data from server and still pick up the soccer ball" },
	{ "BallBounce", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether the ball bounces off walls" },
	{ "BallCount", "Arena", "Integer", NULL, NULL, "0",
		"The number of balls in this arena." },
	{ "BallLocation", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether the balls location is displayed at all times or not" },
	{ "CapturePoints", "Arena", "Integer", NULL, NULL, "1",
		"If positive, these points are distributed to each goal/team. When you make a goal, the points get transferred to your goal/team. In timed games, team with most points in their goal wins.  If one team gets all the points, then they win as well.  If negative, teams are given 1 point for each goal, first team to reach -CapturePoints points wins the game." },
	{ "GoalDelay", "Arena", "Integer", NULL, NULL, "0",
		"How long after a goal before the ball appears (in ticks)." },
	{ "MinPlayers", "Arena", "Integer", NULL, NULL, "0",
		"The minimum number of players who must be playing for soccer points to be awarded." },
	{ "MinTeams", "Arena", "Integer", NULL, NULL, "0",
		"The minimum number of teams that must exist for soccer points to be awarded." },
	{ "Mode", "Arena", "Enumerated", NULL, NULL, NULL,
		"Goal configuration ($GOAL_ALL, $GOAL_LEFTRIGHT, $GOAL_TOPBOTTOM, $GOAL_CORNERS_3_1, $GOAL_CORNERS_1_3, $GOAL_SIDES_3_1, $GOAL_SIDES_1_3)" },
	{ "NewGameDelay", "Arena", "Integer", NULL, NULL, "-3000",
		"How long to wait between games. If this is negative, the actual delay is random, between zero and the absolute value. Units: ticks." },
	{ "PassDelay", "Arena", "Integer", NULL, NULL, NULL,
		"How long after the ball is fired before anybody can pick it up (in ticks)" },
	{ "Reward", "Arena", "Integer", NULL, NULL, "0",
		"Negative numbers equal absolute points given, positive numbers use FlagReward formula." },
	{ "SendTime", "Arena", "Integer", "100-3000", NULL, "1000",
		"How often the server sends ball positions (in ticks)." },
	{ "SpawnRadius", "Arena", "Integer", NULL, NULL, "20",
		"How far from the spawn center the ball can spawn (in tiles)." },
	{ "SpawnX", "Arena", "Integer", "0-1023", NULL, "512",
		"The X coordinate that the ball spawns at (in tiles)." },
	{ "SpawnY", "Arena", "Integer", "0-1023", NULL, "512",
		"The Y coordinate that the ball spawns at (in tiles)." },
	{ "UseFlagger", "Arena", "Boolean", NULL, NULL, NULL,
		"If player with soccer ball should use the Flag:Flagger* ship adjustments or not" },
	{ "WinBy", "Arena", "Integer", NULL, NULL, "0",
		"Have to beat other team by this many goals" },
};

static const struct key_help cfg_help_section_contents_Spawn[] =
{
	{ "TeamN-X/Y/Radius", "Arena", "Integer", NULL, NULL, NULL,
		"Specify spawn location and radius per team. If only Team0 variables are set, all teams use them, if Team0 and Team1 variables are set, even teams use Team0 and odd teams use Team1. It is possible to set spawn positions for upto 4 teams (Team0-Team3). (Cont .38+)" },
};

static const struct key_help cfg_help_section_contents_Spectator[] =
{
	{ "HideFlags", "Arena", "Boolean", NULL, NULL, "0",
		"Whether to show dropped flags to spectators (Cont .36+)" },
	{ "NoXRadar", "Arena", "Boolean", NULL, NULL, "0",
		"Whether spectators are disallowed from having X radar (Cont .36+)" },
};

static const struct key_help cfg_help_section_contents_Team[] =
{
	{ "AllowFreqOwners", "Arena", "Boolean", NULL, NULL, "1",
		"Whether to enable the freq ownership feature in this arena." },
	{ "DesiredTeams", "Arena", "Integer", NULL, NULL, "2",
		"The number of teams that the freq balancer will form as players enter." },
	{ "ForceEvenTeams", "Arena", "Other", NULL, NULL, "0",
		"Whether players can switch to more populous teams." },
	{ "FrequencyShipTypes", "Arena", "Boolean", NULL, NULL, "0",
		"If this is set, freq 0 will only be allowed to use warbirds, freq 1 can only use javelins, etc." },
	{ "IncludeSpectators", "Arena", "Boolean", NULL, NULL, "0",
		"Whether to include spectators when enforcing maximum freq sizes." },
	{ "InitalSpec", "Arena", "Boolean", NULL, NULL, "0",
		"If players entering the arena are always assigned to spectator mode." },
	{ "MaxFrequency", "Arena", "Integer", "0-9999", NULL, "9999",
		"The highest frequency allowed. Set this below PrivFreqStart to disallow private freqs." },
	{ "MaxPerPrivateTeam", "Arena", "Integer", NULL, NULL, "0",
		"The maximum number of players on a private freq. Zero means no limit." },
	{ "MaxPerTeam", "Arena", "Integer", NULL, NULL, "0",
		"The maximum number of players on a public freq. Zero means no limit." },
	{ "PrivFreqStart", "Arena", "Integer", "0-9999", NULL, "100",
		"Freqs above this value are considered private freqs." },
	{ "SpectatorFrequency", "Arena", "Integer", "0-9999", NULL, "8025",
		"The frequency that spectators are assigned to, by default." },
};

static const struct key_help cfg_help_section_contents_Toggle[] =
{
	{ "AntiWarpPixels", "Arena", "Integer", NULL, NULL, NULL,
		"Distance Anti-Warp affects other players (in pixels) (note: enemy must also be on radar)" },
};

static const struct key_help cfg_help_section_contents_TurfReward[] =
{
	{ "MinFlags", "Arena", "Integer", NULL, NULL, "1",
		"The minimum number of flags needed to be owned by a freq for that team to be eligable to recieve points." },
	{ "MinFlagsPercent", "Arena", "Integer", NULL, NULL, "0",
		"The minimum percent of flags needed to be owned by a freq for that team to be eligable to recieve points. (ex. 18532 means 18.532%)" },
	{ "MinPercent", "Arena", "Integer", NULL, NULL, "0",
		"The minimum percent of points needed to be owned by a freq for that team to be eligable to recieve points. (ex. 18532 means 18.532%)" },
	{ "MinPlayersArena", "Arena", "Integer", NULL, NULL, "6",
		"The minimum number of players needed in the arena for anyone to be eligable to recieve points." },
	{ "MinPlayersTeam", "Arena", "Integer", NULL, NULL, "3",
		"The minimum number of players needed on a team for players on that team to be eligable to recieve points." },
	{ "MinTeams", "Arena", "Integer", NULL, NULL, "2",
		"The minimum number of teams needed in the arena for anyone to be eligable to recieve points." },
	{ "MinWeights", "Arena", "Integer", NULL, NULL, "1",
		"The minimum number of weights needed to be owned by a freq for that team to be eligable to recieve points." },
	{ "MinWeightsPercent", "Arena", "Integer", NULL, NULL, "0",
		"The minimum percent of weights needed to be owned by a freq for that team to be eligable to recieve points. (ex. 18532 means 18.532%)" },
	{ "RecoverDings", "Arena", "Integer", NULL, NULL, "1",
		"After losing a flag, the number of dings allowed to pass before a freq loses the chance to recover.  0 means you have no chance of recovery after it dings (to recover, you must recover before any ding occurs),  1 means it is allowed to ding once and you still have a chance to recover (any ding after that you lost chance of full recovery), ..." },
	{ "RecoverMax", "Arena", "Integer", NULL, NULL, "-1",
		"Maximum number of times a flag may be recovered. (-1 means no max)" },
	{ "RecoverTime", "Arena", "Integer", NULL, NULL, "300",
		"After losing a flag, the time (seconds) allowed to pass before a freq loses the chance to recover." },
	{ "RecoveryCutoff", "Arena", "Enumerated", NULL, NULL, "$TR_RECOVERY_DINGS",
		"Style of recovery cutoff to be used. $TR_RECOVERY_DINGS - recovery cutoff based on RecoverDings. $TR_RECOVERY_TIME - recovery cutoff based on RecoverTime. $TR_RECOVERY_DINGS_AND_TIME - recovery cutoff based on both RecoverDings and RecoverTime." },
	{ "RewardModifier", "Arena", "Integer", NULL, NULL, "200",
		"Modifies the number of points to award.  Meaning varies based on reward algorithm being used. For $REWARD_STD: jackpot = # players * RewardModifer" },
	{ "RewardStyle", "Arena", "Enumerated", NULL, NULL, "$TR_STYLE_DISABLED",
		"The reward algorithm to be used.  Default is $TR_STYLE_STANDARD for standard weighted scoring. Other built in algorithms are: $TR_STYLE_DISABLED: disable scoring, $TR_STYLE_PERIODIC: normal periodic scoring but with the stats, $TR_STYLE_FIXED_PTS: each team gets a fixed # of points based on 1st, 2nd, 3rd,... place $TR_STYLE_WEIGHTS: number of points to award equals number of weights owned.  Note: for points_turf_reward (default scoring module), currently only $TR_STYLE_STANDARD and $TR_STYLE_PERIODIC are implemented." },
	{ "SafeRecievePoints", "Arena", "Boolean", NULL, NULL, "0",
		"Whether players in safe zones recieve reward points." },
	{ "SetWeights", "Arena", "Integer", NULL, NULL, "0",
		"How many weights to set from cfg (16 means you want to specify Weight0 to Weight15). If set to 0, then by default one weight is set with a value of 1." },
	{ "SpecRecievePoints", "Arena", "Boolean", NULL, NULL, "0",
		"Whether players in spectator mode recieve reward points." },
	{ "TimerInitial", "Arena", "Integer", NULL, NULL, "6000",
		"Inital turf_reward ding timer period." },
	{ "TimerInterval", "Arena", "Integer", NULL, NULL, "6000",
		"Subsequent turf_reward ding timer period." },
	{ "WeightCalc", "Arena", "Enumerated", NULL, NULL, "$TR_WEIGHT_DINGS",
		"The method weights are calculated.  $TR_WEIGHT_TIME means each weight stands for one minute (ex: Weight004 is the weight for a flag owned for 4 minutes).  $TR_WEIGHT_DINGS means each weight stands for one ding of ownership (ex: Weight004 is the weight for a flag that was owned during 4 dings)." },
};

static const struct key_help cfg_help_section_contents_Wormhole[] =
{
	{ "GravityBombs", "Arena", "Boolean", NULL, NULL, NULL,
		"Whether a wormhole affects bombs" },
	{ "SwitchTime", "Arena", "Integer", NULL, NULL, NULL,
		"How often the wormhole switches its destination" },
};



static const struct section_help cfg_help_sections[] =
{
	{ "All", 84, cfg_help_section_contents_All,
		"AfterburnerEnergy, AntiWarpEnergy, AntiWarpStatus, AttachBounty, BombBounceCount, BombFireDelay, BombFireEnergy, BombFireEnergyUpgrade, BombSpeed, BombThrust, BrickMax, BulletFireDelay, BulletFireEnergy, BulletSpeed, BurstMax, BurstShrapnel, BurstSpeed, CloakEnergy, CloakStatus, DamageFactor, DecoyMax, DisableFastShooting, DoubleBarrel, EmpBomb, Gravity, GravityTopSpeed, InitialBombs, InitialBounty, InitialBrick, InitialBurst, InitialDecoy, InitialEnergy, InitialGuns, InitialPortal, InitialRecharge, InitialRepel, InitialRocket, InitialRotation, InitialSpeed, InitialThor, InitialThrust, LandmineFireDelay, LandmineFireEnergy, LandmineFireEnergyUpgrade, MaxBombs, MaxGuns, MaximumEnergy, MaximumRecharge, MaximumRotation, MaximumSpeed, MaximumThrust, MaxMines, MultiFireAngle, MultiFireDelay, MultiFireEnergy, PortalMax, PrizeShareLimit, Radius, RepelMax, RocketMax, RocketTime, SeeBombLevel, SeeMines, ShieldsTime, ShrapnelMax, ShrapnelRate, SoccerBallFriction, SoccerBallProximity, SoccerBallSpeed, SoccerThrowTime, StealthEnergy, StealthStatus, SuperTime, ThorMax, TurretLimit, TurretSpeedPenalty, TurretThrustPenalty, UpgradeEnergy, UpgradeRecharge, UpgradeRotation, UpgradeSpeed, UpgradeThrust, XRadarEnergy, XRadarStatus" },
	{ "Billing", 12, cfg_help_section_contents_Billing,
		"IP, LocalChatPrefix, Password, Port, Proxy, RetryInterval, ScoreID, ServerID, ServerName, ServerNetwork, StaffChatPrefix, StaffChats" },
	{ "Bomb", 10, cfg_help_section_contents_Bomb,
		"BBombDamagePercent, BombAliveTime, BombDamageLevel, BombExplodeDelay, BombExplodePixels, BombSafety, EBombDamagePercent, EBombShutdownTime, JitterTime, ProximityDistance" },
	{ "Brick", 4, cfg_help_section_contents_Brick,
		"BrickMode, BrickSpan, BrickTime, CountBricksAsWalls" },
	{ "Bullet", 4, cfg_help_section_contents_Bullet,
		"BulletAliveTime, BulletDamageLevel, BulletDamageUpgrade, ExactDamage" },
	{ "Burst", 1, cfg_help_section_contents_Burst,
		"BurstDamageLevel" },
	{ "Chat", 5, cfg_help_section_contents_Chat,
		"CommandLimit, FloodLimit, FloodShutup, MessageReliable, RestrictChat" },
	{ "Config", 2, cfg_help_section_contents_Config,
		"CheckModifiedFilesInterval, FlushDirtyValuesInterval" },
	{ "Cost", 1, cfg_help_section_contents_Cost,
		"PurchaseAnytime" },
	{ "Directory", 4, cfg_help_section_contents_Directory,
		"Description, Name, Password, Port" },
	{ "Door", 2, cfg_help_section_contents_Door,
		"DoorDelay, DoorMode" },
	{ "Flag", 35, cfg_help_section_contents_Flag,
		"CarryFlags, DropCenter, DropOwned, DropRadius, EnterGameFlaggingDelay, FlagBlankDelay, FlagCount, FlagDropDelay, FlagDropResetReward, FlaggerBombFireDelay, FlaggerBombUpgrade, FlaggerDamagePercent, FlaggerFireCostPercent, FlaggerGunUpgrade, FlaggerKillMultiplier, FlaggerOnRadar, FlaggerSpeedAdjustment, FlaggerThrustAdjustment, FlagReward, FriendlyTransfer , GameType, NeutCenter, NeutOwned, NoDataFlagDropDelay, PersistentTurfOwners, ResetDelay, SafeCenter, SafeOwned, SpawnRadius, SpawnX, SpawnY, SplitPoints, TKCenter, TKOwned, WinDelay" },
	{ "General", 12, cfg_help_section_contents_General,
		"AllowUnknown, AutoAdd, DesiredPlaying, LevelFiles, Map, MaxPlaying, NeedCap, NewsFile, NewsRefreshMinutes, PublicArenas, ScoreGroup, ShipChangeLimit" },
	{ "Kill", 7, cfg_help_section_contents_Kill,
		"BountyIncreaseForKill, EnterDelay, FlagValue, JackpotBountyPercent, MaxBonus, MaxPenalty, RewardBase" },
	{ "Lag", 16, cfg_help_section_contents_Lag,
		"C2SLossToDisallowFlags, C2SLossToSpec, CheckInterval, PingToDisallowFlags, PingToIgnoreAllWeapons, PingToSpec, PingToStartIgnoringWeapons, S2CLossToDisallowFlags, S2CLossToIgnoreAllWeapons, S2CLossToSpec, S2CLossToStartIgnoringWeapons, SpikeToSpec, WeaponLossToDisallowFlags, WeaponLossToIgnoreAllWeapons, WeaponLossToSpec, WeaponLossToStartIgnoringWeapons" },
	{ "Latency", 4, cfg_help_section_contents_Latency,
		"ClientSlowPacketSampleSize, ClientSlowPacketTime, S2CNoDataKickoutDelay, SendRoutePercent" },
	{ "Listen", 5, cfg_help_section_contents_Listen,
		"AllowCont, AllowVIE, BindAddress, ConnectAs, Port" },
	{ "Log", 2, cfg_help_section_contents_Log,
		"FileFlushPeriod, LogFile" },
	{ "log_staff", 1, cfg_help_section_contents_log_staff,
		"commands" },
	{ "Message", 1, cfg_help_section_contents_Message,
		"AllowAudioMessages" },
	{ "Mine", 2, cfg_help_section_contents_Mine,
		"MineAliveTime, TeamMaxMines" },
	{ "Misc", 28, cfg_help_section_contents_Misc,
		"ActivateAppShutdownTime, AllowSavedShips, AntiWarpSettleDelay, BounceFactor, DecoyAliveTime, DisableBallKilling, DisableBallThroughWalls, DisableScreenshot, ExtraPositionData, FrequencyShift, GreetMessage, MaxXres, MaxYres, NearDeathLevel, SafetyLimit, SeeEnergy, SelfScoreReset, SendPositionDelay, SheepMessage, SlowFrameCheck, SpecSeeEnergy, SpecSeeExtra, TeamKillPoints, TickerDelay, TimedGame, VictoryMusic, WarpPointDelay, WarpRadiusLimit" },
	{ "Modules", 1, cfg_help_section_contents_Modules,
		"AttachModules" },
	{ "mysql", 4, cfg_help_section_contents_mysql,
		"database, hostname, password, user" },
	{ "Net", 9, cfg_help_section_contents_Net,
		"AntiwarpSendPercent, BulletPixels, ChatListen, ChatMessageDelay, DropTimeout, Listen, MaxOutlistSize, PositionExtraPixels, WeaponPixels" },
	{ "Periodic", 3, cfg_help_section_contents_Periodic,
		"RewardDelay, RewardMinimumPlayers, RewardPoints" },
	{ "Persist", 1, cfg_help_section_contents_Persist,
		"SyncSeconds" },
	{ "Prize", 15, cfg_help_section_contents_Prize,
		"DeathPrizeTime, DontShareBrick, DontShareBurst, DontShareThor, EngineShutdownTime, MinimumVirtual, MultiPrizeCount, PrizeDelay, PrizeFactor, PrizeHideCount, PrizeMaxExist, PrizeMinExist, PrizeNegativeFactor, TakePrizeReliable, UpgradeVirtual" },
	{ "PrizeWeight", 28, cfg_help_section_contents_PrizeWeight,
		"AllWeapons, AntiWarp, Bomb, BouncingBullets, Brick, Burst, Cloak, Decoy, Energy, Glue, Gun, MultiFire, MultiPrize, Portal, Proximity, QuickCharge, Recharge, Repel, Rocket, Rotation, Shields, Shrapnel, Stealth, Thor, Thruster, TopSpeed, Warp, XRadar" },
	{ "Radar", 3, cfg_help_section_contents_Radar,
		"MapZoomFactor, RadarMode, RadarNeutralSize" },
	{ "Repel", 3, cfg_help_section_contents_Repel,
		"RepelDistance, RepelSpeed, RepelTime" },
	{ "Rocket", 2, cfg_help_section_contents_Rocket,
		"RocketSpeed, RocketThrust" },
	{ "Security", 1, cfg_help_section_contents_Security,
		"MaxDeathWithoutFiring" },
	{ "Shrapnel", 4, cfg_help_section_contents_Shrapnel,
		"InactiveShrapDamage, Random, ShrapnelDamagePercent, ShrapnelSpeed" },
	{ "Soccer", 21, cfg_help_section_contents_Soccer,
		"AllowBombs, AllowGoalByDeath, AllowGuns, BallBlankDelay, BallBounce, BallCount, BallLocation, CapturePoints, GoalDelay, MinPlayers, MinTeams, Mode, NewGameDelay, PassDelay, Reward, SendTime, SpawnRadius, SpawnX, SpawnY, UseFlagger, WinBy" },
	{ "Spawn", 1, cfg_help_section_contents_Spawn,
		"TeamN-X/Y/Radius" },
	{ "Spectator", 2, cfg_help_section_contents_Spectator,
		"HideFlags, NoXRadar" },
	{ "Team", 11, cfg_help_section_contents_Team,
		"AllowFreqOwners, DesiredTeams, ForceEvenTeams, FrequencyShipTypes, IncludeSpectators, InitalSpec, MaxFrequency, MaxPerPrivateTeam, MaxPerTeam, PrivFreqStart, SpectatorFrequency" },
	{ "Toggle", 1, cfg_help_section_contents_Toggle,
		"AntiWarpPixels" },
	{ "TurfReward", 20, cfg_help_section_contents_TurfReward,
		"MinFlags, MinFlagsPercent, MinPercent, MinPlayersArena, MinPlayersTeam, MinTeams, MinWeights, MinWeightsPercent, RecoverDings, RecoverMax, RecoverTime, RecoveryCutoff, RewardModifier, RewardStyle, SafeRecievePoints, SetWeights, SpecRecievePoints, TimerInitial, TimerInterval, WeightCalc" },
	{ "Wormhole", 2, cfg_help_section_contents_Wormhole,
		"GravityBombs, SwitchTime" },
};

#define cfg_help_section_count 41

static const char cfg_help_all_section_names[] = "All, Billing, Bomb, Brick, Bullet, Burst, Chat, Config, Cost, Directory, Door, Flag, General, Kill, Lag, Latency, Listen, Log, log_staff, Message, Mine, Misc, Modules, mysql, Net, Periodic, Persist, Prize, PrizeWeight, Radar, Repel, Rocket, Security, Shrapnel, Soccer, Spawn, Spectator, Team, Toggle, TurfReward, Wormhole";


/* end of generated code */

